# To create a route table.
az network route-table create \
    --name publictable \
    --resource-group [sandbox resource group name] \
    --disable-bgp-route-propagation false

# To create a custom route.

az network route-table route create \
    --route-table-name publictable \
    --resource-group [sandbox resource group name] \
    --name productionsubnet \
    --address-prefix 10.0.1.0/24 \
    --next-hop-type VirtualAppliance \
    --next-hop-ip-address 10.0.2.4

# To Create a virtual network and subnets.
az network vnet create \
        --name vnet \
        --resource-group [sandbox resource group name] \
        --address-prefixes 10.0.0.0/16 \
        --subnet-name publicsubnet \
        --subnet-prefixes 10.0.0.0/24

az network vnet subnet create \
        --name privatesubnet \
        --vnet-name vnet \
        --resource-group [sandbox resource group name] \
        --address-prefixes 10.0.1.0/24

az network vnet subnet create \
        --name dmzsubnet \
        --vnet-name vnet \
        --resource-group [sandbox resource group name] \
        --address-prefixes 10.0.2.0/24

az network vnet subnet list \
        --resource-group [sandbox resource group name] \
        --vnet-name vnet \
        --output table

# To Associate the route table with the public subnet.

az network vnet subnet update \
        --name publicsubnet \
        --vnet-name vnet \
        --resource-group [sandbox resource group name] \
        --route-table publictable


--------------------------------x----------------------------------------x-----------------------------------------

Exercise - Create an NVA and virtual machines
Completed
100 XP
10 minutes
This module requires a sandbox to complete. A sandbox gives you access to free resources. Your personal subscription will not be charged. The sandbox may only be used to complete training on Microsoft Learn. Use for any other reason is prohibited, and may result in permanent loss of access to the sandbox.
Microsoft provides this lab experience and related content for educational purposes. All presented information is owned by Microsoft and intended solely for learning about the covered products and services in this Microsoft Learn module.

In the next stage of your security implementation, you'll deploy a network virtual appliance (NVA) to secure and monitor traffic between your front-end public servers and internal private servers.

You'll configure the appliance to forward IP traffic. If IP forwarding isn't enabled, traffic that is routed through your appliance will never be received by its intended destination servers.

In this exercise, you'll deploy the nva network appliance to the dmzsubnet subnet. Then you'll enable IP forwarding so that traffic from publicsubnet and traffic that uses the custom route is sent to the privatesubnet subnet.

Network virtual appliance with IP forwarding enabled.

In the following steps, you'll deploy an NVA. You'll then update the Azure virtual NIC and the network settings within the appliance to enable IP forwarding.

Deploy the network virtual appliance
To build the NVA, deploy an Ubuntu LTS instance.

In Cloud Shell, run the following command to deploy the appliance. Replace <password> with a suitable password of your choice for the azureuser admin account.

Azure CLI

Copy
az vm create \
    --resource-group [sandbox resource group name] \
    --name nva \
    --vnet-name vnet \
    --subnet dmzsubnet \
    --image UbuntuLTS \
    --admin-username azureuser \
    --admin-password <password>
Enable IP forwarding for the Azure network interface
In the next steps, IP forwarding for the nva network appliance is enabled. When traffic flows to the NVA but is meant for another target, the NVA will route that traffic to its correct destination.

Run the following command to get the ID of the NVA network interface.

Azure CLI

Copy
NICID=$(az vm nic list \
    --resource-group [sandbox resource group name] \
    --vm-name nva \
    --query "[].{id:id}" --output tsv)

echo $NICID
Run the following command to get the name of the NVA network interface.

Azure CLI

Copy
NICNAME=$(az vm nic show \
    --resource-group [sandbox resource group name] \
    --vm-name nva \
    --nic $NICID \
    --query "{name:name}" --output tsv)

echo $NICNAME
Run the following command to enable IP forwarding for the network interface.

Azure CLI

Copy
az network nic update --name $NICNAME \
    --resource-group [sandbox resource group name] \
    --ip-forwarding true
Enable IP forwarding in the appliance
Run the following command to save the public IP address of the NVA virtual machine to the variable NVAIP.

Azure CLI

Copy
NVAIP="$(az vm list-ip-addresses \
    --resource-group [sandbox resource group name] \
    --name nva \
    --query "[].virtualMachine.network.publicIpAddresses[*].ipAddress" \
    --output tsv)"

echo $NVAIP
Run the following command to enable IP forwarding within the NVA.

Bash

Copy
ssh -t -o StrictHostKeyChecking=no azureuser@$NVAIP 'sudo sysctl -w net.ipv4.ip_forward=1; exit;'
When prompted, enter the password you used when you created the virtual machine.

---------------------------------------------------------------------------------------------------------------------------

Exercise - Route traffic through the NVA
Completed
100 XP
10 minutes
This module requires a sandbox to complete. A sandbox gives you access to free resources. Your personal subscription will not be charged. The sandbox may only be used to complete training on Microsoft Learn. Use for any other reason is prohibited, and may result in permanent loss of access to the sandbox.
Microsoft provides this lab experience and related content for educational purposes. All presented information is owned by Microsoft and intended solely for learning about the covered products and services in this Microsoft Learn module.

Now that you've created the network virtual appliance (NVA) and virtual machines (VMs), you'll route the traffic through the NVA.

Virtual machines and IP addresses.

Create public and private virtual machines
The next steps deploy a VM into the public and private subnets.

Open the Cloud Shell editor and create a file named cloud-init.txt.

Bash

Copy
code cloud-init.txt
Add the following configuration information to the file. With this configuration, the inetutils-traceroute package is installed when you create a new VM. This package contains the traceroute utility that you'll use later in this exercise.

Text

Copy
#cloud-config
package_upgrade: true
packages:
   - inetutils-traceroute
Press Ctrl+S to save the file, and then press Ctrl+Q to close the editor.

In Cloud Shell, run the following command to create the public VM. Replace <password> with a suitable password for the azureuser account.

Azure CLI

Copy
az vm create \
    --resource-group [sandbox resource group name] \
    --name public \
    --vnet-name vnet \
    --subnet publicsubnet \
    --image UbuntuLTS \
    --admin-username azureuser \
    --no-wait \
    --custom-data cloud-init.txt \
    --admin-password <password>
Run the following command to create the private VM. Replace <password> with a suitable password.

Azure CLI

Copy
az vm create \
    --resource-group [sandbox resource group name] \
    --name private \
    --vnet-name vnet \
    --subnet privatesubnet \
    --image UbuntuLTS \
    --admin-username azureuser \
    --no-wait \
    --custom-data cloud-init.txt \
    --admin-password <password>
Run the following Linux watch command to check that the VMs are running. The watch command periodically runs the az vm list command so that you can monitor the progress of the VMs.

Bash

Copy
watch -d -n 5 "az vm list \
    --resource-group [sandbox resource group name] \
    --show-details \
    --query '[*].{Name:name, ProvisioningState:provisioningState, PowerState:powerState}' \
    --output table"
A ProvisioningState value of "Succeeded" and a PowerState value of "VM running" indicate a successful deployment. When all three VMs are running, you're ready to move on. Press Ctrl-C to stop the command and continue with the exercise.

Run the following command to save the public IP address of the public VM to a variable named PUBLICIP.

Azure CLI

Copy
PUBLICIP="$(az vm list-ip-addresses \
    --resource-group [sandbox resource group name] \
    --name public \
    --query "[].virtualMachine.network.publicIpAddresses[*].ipAddress" \
    --output tsv)"

echo $PUBLICIP
Run the following command to save the public IP address of the private VM to a variable named PRIVATEIP.

Azure CLI

Copy
PRIVATEIP="$(az vm list-ip-addresses \
    --resource-group [sandbox resource group name] \
    --name private \
    --query "[].virtualMachine.network.publicIpAddresses[*].ipAddress" \
    --output tsv)"

echo $PRIVATEIP
Test traffic routing through the network virtual appliance
The final steps use the Linux traceroute utility to show how traffic is routed. You'll use the ssh command to run traceroute on each VM. The first test will show the route taken by ICMP packets sent from the public VM to the private VM. The second test will show the route taken by ICMP packets sent from the private VM to the public VM.

Run the following command to trace the route from public to private. When prompted, enter the password for the azureuser account that you specified earlier.

Bash

Copy
ssh -t -o StrictHostKeyChecking=no azureuser@$PUBLICIP 'traceroute private --type=icmp; exit'
If you receive the error message bash: traceroute: command not found, wait a minute and retry the command. The automated installation of traceroute can take a minute or two after VM deployment. After the command succeeds, the output should look similar to the following example:

Text

Copy
traceroute to private.kzffavtrkpeulburui2lgywxwg.gx.internal.cloudapp.net (10.0.1.4), 64 hops max
1   10.0.2.4  0.710ms  0.410ms  0.536ms
2   10.0.1.4  0.966ms  0.981ms  1.268ms
Connection to 52.165.151.216 closed.
Notice that the first hop is to 10.0.2.4. This address is the private IP address of nva. The second hop is to 10.0.1.4, the address of private. In the first exercise, you added this route to the route table and linked the table to the publicsubnet subnet. So now all traffic from public to private is routed through the NVA.

Route from public to private.

Run the following command to trace the route from private to public. When prompted, enter the password for the azureuser account.

Bash

Copy
ssh -t -o StrictHostKeyChecking=no azureuser@$PRIVATEIP 'traceroute public --type=icmp; exit'
You should see the traffic go directly to public (10.0.0.4) and not through the NVA, as shown in the following command output.

Text

Copy
traceroute to public.kzffavtrkpeulburui2lgywxwg.gx.internal.cloudapp.net (10.0.0.4), 64 hops max
1   10.0.0.4  1.095ms  1.610ms  0.812ms
Connection to 52.173.21.188 closed.
The private VM is using default routes, and traffic is routed directly between the subnets.

Route from private to public.

You've now configured routing between subnets to direct traffic from the public internet through the dmzsubnet subnet before it reaches the private subnet. In the dmzsubnet subnet, you added a VM that acts as an NVA. You can configure this NVA to detect potentially malicious requests and block them before they reach their intended targets.

--------------------------------------------------------------------------------------------------------
-------------------X---------------------X-----------------------X-----------------X---------------------